{"ast":null,"code":"/* eslint-disable no-plusplus */\n\n/* eslint-disable class-methods-use-this */\nimport { evaluate } from 'mathjs';\n\nclass OperationSign {\n  constructor() {\n    this.type = ['+', '-', '*', '/', '.', '%'];\n    this.typeNoALL = ['*', '/', '.', '%'];\n    this.typeWithoutPointPercent = ['+', '-', '*', '/'];\n  }\n\n  putAway(mas) {\n    const lengthArray = mas.length - 1;\n\n    if (this.type.includes(mas[lengthArray])) {\n      return mas.slice(0, lengthArray);\n    }\n\n    return mas;\n  }\n\n  putFirst(mas) {\n    if (this.typeNoALL.includes(mas[0])) {\n      return 'Ошибка!';\n    }\n\n    const result = evaluate(mas);\n    return result;\n  }\n\n  endValue(mas) {\n    const lengthArray = mas.length - 1;\n\n    if (this.type.includes(mas[lengthArray])) {\n      return mas.slice(0, lengthArray);\n    }\n\n    return mas;\n  }\n\n  pointEnd(array) {\n    const returnedValue = array.ToString();\n    const lengthArray = returndedValue.length;\n    const returnEnd = [returndedValue.slice(0, lengthArray - 1), '0'];\n    if (returndedValue[lengthArray - 1] > 0) return [...returndedValue.slice(0, lengthArray)].join('');\n    return returnEnd.join('');\n  }\n\n  plusMinOperation(mas) {\n    const NumValue = [];\n    let result = 0;\n    let endValue = 0;\n\n    for (let i = mas.length - 1; i >= 0; i--) {\n      // eslint-disable-next-line no-param-reassign\n      if (this.typeWithoutPointPercent.includes(mas[i])) {\n        NumValue.push(i);\n      }\n    }\n\n    result = mas.slice(NumValue[0], mas.length);\n    endValue = mas.slice(NumValue[0] + 1, mas.length);\n    if (result > 0) return [...mas.slice(0, NumValue[0] + 1), '(', '-', endValue, ')'].join('');\n    if (result < 0) return [...mas.slice(0, NumValue[0] + 1), '(', '+', endValue, ')'].join('');\n    if (mas < 0) return ['+', ...mas].join('');\n    if (mas > 0) return ['-', ...mas].join('');\n    return mas;\n  }\n\n}\n\nexport default OperationSign;","map":{"version":3,"sources":["C:/git/my-calc/client/src/scripts/PutAway.js"],"names":["evaluate","OperationSign","constructor","type","typeNoALL","typeWithoutPointPercent","putAway","mas","lengthArray","length","includes","slice","putFirst","result","endValue","pointEnd","array","returnedValue","ToString","returndedValue","returnEnd","join","plusMinOperation","NumValue","i","push"],"mappings":"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","sourcesContent":["/* eslint-disable no-plusplus */\n/* eslint-disable class-methods-use-this */\nimport {\n  evaluate,\n} from 'mathjs'\n\nclass OperationSign {\n  constructor() {\n    this.type = ['+', '-', '*', '/', '.', '%']\n    this.typeNoALL = ['*', '/', '.', '%']\n    this.typeWithoutPointPercent = ['+', '-', '*', '/']\n  }\n\n  putAway(mas) {\n    const lengthArray = mas.length - 1\n    if (this.type.includes(mas[lengthArray])) {\n      return mas.slice(0, lengthArray)\n    }\n    return mas\n  }\n\n  putFirst(mas) {\n    if (this.typeNoALL.includes(mas[0])) {\n      return 'Ошибка!'\n    }\n    const result = evaluate(mas)\n    return result\n  }\n\n  endValue(mas) {\n    const lengthArray = mas.length - 1\n    if (this.type.includes(mas[lengthArray])) {\n      return mas.slice(0, lengthArray)\n    }\n    return mas\n  }\n\n  pointEnd(array) {\n    const returnedValue = array.ToString()\n    const lengthArray = returndedValue.length\n    const returnEnd = [returndedValue.slice(0, lengthArray - 1), '0']\n    if (returndedValue[lengthArray - 1] > 0) return [...returndedValue.slice(0, lengthArray)].join('')\n    return returnEnd.join('')\n  }\n\n  plusMinOperation(mas) {\n    const NumValue = []\n    let result = 0\n    let endValue = 0\n    for (let i = mas.length - 1; i >= 0; i--) {\n      // eslint-disable-next-line no-param-reassign\n      if (this.typeWithoutPointPercent.includes(mas[i])) {\n        NumValue.push(i)\n      }\n    }\n    result = mas.slice(NumValue[0], mas.length)\n    endValue = mas.slice(NumValue[0] + 1, mas.length)\n    if (result > 0) return [...mas.slice(0, NumValue[0] + 1), '(', '-', endValue, ')'].join('')\n    if (result < 0) return [...mas.slice(0, NumValue[0] + 1), '(', '+', endValue, ')'].join('')\n    if (mas < 0) return ['+', ...mas].join('')\n    if (mas > 0) return ['-', ...mas].join('')\n    return mas\n  }\n}\n\nexport default OperationSign\n"]},"metadata":{},"sourceType":"module"}