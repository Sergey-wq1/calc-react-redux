{"ast":null,"code":"var _jsxFileName = \"D:\\\\github\\\\calc\\\\calc-react-redux\\\\my-calc\\\\client\\\\src\\\\components\\\\Calc.jsx\",\n    _s = $RefreshSig$();\n\nimport Box from '@mui/material/Box';\nimport React, { useCallback, useEffect } from 'react';\nimport { makeStyles } from '@mui/styles';\nimport { Grid } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport operation from '../data/dataRedux';\nimport { buttonOperations, buttons, buttonZero } from '../constans/colorSchemeButtons';\nimport { valueOperation } from '../redux/actions/actions';\nimport getHistory from '../scripts/GetRequest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  display: {\n    fontSize: 28,\n    width: 'auto',\n    whiteSpace: 'normal',\n    textAlign: 'right',\n    fontWeight: 300,\n    height: 90\n  }\n});\nexport const Calc = () => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const store = useSelector(state => state);\n  useEffect(() => {\n    dispatch(getHistory());\n  }, [store.num.updateNedeed]);\n\n  const handleClick = (event, recovery) => function () {\n    if (typeof event === 'number') dispatch(valueOperation(event));else if (recovery) dispatch(recovery());\n  };\n\n  const checkButton = useCallback(value => {\n    if (value === 0) return buttonZero;\n    if (typeof value === 'string') return buttonOperations;\n    return buttons;\n  }, []);\n  const stateArray = useCallback(() => operation.map((val, i) => {\n    const buttonSettings = checkButton(val.type);\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: buttonSettings.size,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        sx: {\n          bgcolor: buttonSettings.color,\n          color: 'white',\n          borderRadius: 2,\n          borderColor: 'text.primary',\n          gridRow: '5',\n          width: '100%',\n          gridColumn: 'span 2'\n        },\n        variant: \"outlined\",\n        size: \"large\",\n        onClick: handleClick(val.type, val.func),\n        className: val.classStyle,\n        children: val.type\n      }, i.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }), []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: classes.display,\n      component: \"span\",\n      sx: {\n        bgcolor: '#B0D6DE',\n        border: 1,\n        borderRadius: 4,\n        display: 'block',\n        color: 'black',\n        marginBottom: 15\n      },\n      children: store.num.counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      rowSpacing: 1,\n      columnSpacing: {\n        xs: 1\n      },\n      children: stateArray()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Calc, \"QC1c6Kacq3FKYrbJPRqETOwo+T8=\", false, function () {\n  return [useStyles, useDispatch, useSelector];\n});\n\n_c = Calc;\nexport default Calc;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calc\");","map":{"version":3,"sources":["D:/github/calc/calc-react-redux/my-calc/client/src/components/Calc.jsx"],"names":["Box","React","useCallback","useEffect","makeStyles","Grid","Button","useDispatch","useSelector","operation","buttonOperations","buttons","buttonZero","valueOperation","getHistory","useStyles","display","fontSize","width","whiteSpace","textAlign","fontWeight","height","Calc","classes","dispatch","store","state","num","updateNedeed","handleClick","event","recovery","checkButton","value","stateArray","map","val","i","buttonSettings","type","size","bgcolor","color","borderRadius","borderColor","gridRow","gridColumn","func","classStyle","toString","border","marginBottom","counter","xs"],"mappings":"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","sourcesContent":["import Box from '@mui/material/Box'\nimport React, { useCallback, useEffect } from 'react'\nimport { makeStyles } from '@mui/styles'\nimport { Grid } from '@mui/material'\nimport Button from '@mui/material/Button'\nimport { useDispatch, useSelector } from 'react-redux'\nimport operation from '../data/dataRedux'\nimport { buttonOperations, buttons, buttonZero } from '../constans/colorSchemeButtons'\nimport { valueOperation } from '../redux/actions/actions'\nimport getHistory from '../scripts/GetRequest'\n\nconst useStyles = makeStyles({\n  display: {\n    fontSize: 28,\n    width: 'auto',\n    whiteSpace: 'normal',\n    textAlign: 'right',\n    fontWeight: 300,\n    height: 90,\n  },\n})\n\nexport const Calc = () => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const store = useSelector((state) => state)\n\n  useEffect(() => {\n    dispatch(getHistory())\n  }, [store.num.updateNedeed])\n\n  const handleClick = (event, recovery) => function () {\n    if (typeof event === 'number') dispatch(valueOperation(event))\n    else if (recovery) dispatch(recovery())\n  }\n\n  const checkButton = useCallback((value) => {\n    if (value === 0) return buttonZero\n    if (typeof value === 'string') return buttonOperations\n    return buttons\n  }, [])\n\n  const stateArray = useCallback(() => operation.map((val, i) => {\n    const buttonSettings = checkButton(val.type)\n    return (\n      <Grid item xs={buttonSettings.size}>\n        <Button\n          sx={{\n            bgcolor: buttonSettings.color,\n            color: 'white',\n            borderRadius: 2,\n            borderColor: 'text.primary',\n            gridRow: '5',\n            width: '100%',\n            gridColumn: 'span 2',\n          }}\n          variant=\"outlined\"\n          size=\"large\"\n          onClick={handleClick(val.type, val.func)}\n          key={i.toString()}\n          className={val.classStyle}\n        >\n          {val.type}\n        </Button>\n      </Grid>\n    )\n  }), [])\n\n  return (\n    <div>\n      <Box\n        className={classes.display}\n        component=\"span\"\n        sx={{\n          bgcolor: '#B0D6DE', border: 1, borderRadius: 4, display: 'block', color: 'black', marginBottom: 15\n        }}\n      >\n        {store.num.counter}\n      </Box>\n      <Grid container rowSpacing={1} columnSpacing={{ xs: 1 }}>\n        {stateArray()}\n      </Grid>\n    </div>\n  )\n}\n\nexport default Calc\n"]},"metadata":{},"sourceType":"module"}