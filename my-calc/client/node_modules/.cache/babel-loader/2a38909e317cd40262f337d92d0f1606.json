{"ast":null,"code":"import { evaluate } from 'mathjs';\nexport const replacementSign = counter => {\n  const sign = ['+', '-', '*', '/', '.', '%'];\n  const lengthArray = counter.length - 1;\n\n  if (sign.includes(counter[lengthArray])) {\n    return counter.slice(0, lengthArray);\n  }\n\n  return counter;\n};\nexport const forbiddenFirstCharacter = counter => {\n  const sign = ['*', '/', '.', '%'];\n\n  if (sign.includes(counter[0])) {\n    return 'Ошибка!';\n  }\n\n  return evaluate(counter);\n};\nexport const forbiddenLastCharacter = counter => {\n  const sign = ['+', '-', '*', '/', '.', '%'];\n  const lengthArray = counter.length - 1;\n\n  if (sign.includes(counter[lengthArray])) {\n    return counter.slice(0, lengthArray);\n  }\n\n  return counter;\n};\nexport const paintPoint = counter => {\n  const returnValue = counter.toString();\n  const lengthArray = returnValue.length;\n  const returnEnd = [returnValue.slice(0, lengthArray), '0'];\n  if (returnValue[lengthArray - 1] >= 0) return [...returnValue.slice(0, lengthArray)].join('');\n  return returnEnd.join('');\n};\nexport const foundSignIndex = str => {\n  const arr = [];\n\n  for (let i = str.length; i > 0; i -= 1) {\n    if (str[i] === '+' || str[i] === '-' || str[i] === '*' || str[i] === '/') {\n      arr.push(i);\n    }\n  }\n\n  return arr[0];\n};\nexport const inspectionSigns = _counter => {\n  const indexSign = foundSignIndex(_counter);\n\n  const sliceHistoryStart = _counter.slice(0, indexSign + 1);\n\n  const sliceHistoryEnd = _counter.slice(indexSign + 1, _counter.length);\n\n  if (indexSign) {\n    if (_counter[indexSign - 1] === '(') {\n      const sliceStartPlus = sliceHistoryStart.slice(0, indexSign - 1);\n      const sliceEndPlus = sliceHistoryEnd.slice(0, sliceHistoryEnd.length - 1);\n      return `${sliceStartPlus}${sliceEndPlus}`;\n    }\n\n    return `${sliceHistoryStart}(-${sliceHistoryEnd})`;\n  }\n\n  return _counter;\n};\nexport const changeSign = _counter => {\n  const sign = ['+', '-', '/', '*'];\n  const lengthCounter = _counter.length;\n\n  if (_counter[lengthCounter - 1] === '-') {\n    const historyCounterPlusEnd = _counter.slice(0, lengthCounter - 1);\n\n    return `${historyCounterPlusEnd}+`;\n  }\n\n  if (_counter[lengthCounter - 1] === '+') {\n    const historyCounter = _counter.slice(0, lengthCounter - 1);\n\n    return `${historyCounter}-`;\n  }\n\n  if (!_counter[lengthCounter - 1].includes(sign)) {\n    return inspectionSigns(_counter);\n  }\n\n  return _counter;\n};","map":{"version":3,"sources":["D:/github/calc/calc-react-redux/my-calc/client/src/helpers/changesOperationsMath.js"],"names":["evaluate","replacementSign","counter","sign","lengthArray","length","includes","slice","forbiddenFirstCharacter","forbiddenLastCharacter","paintPoint","returnValue","toString","returnEnd","join","foundSignIndex","str","arr","i","push","inspectionSigns","_counter","indexSign","sliceHistoryStart","sliceHistoryEnd","sliceStartPlus","sliceEndPlus","changeSign","lengthCounter","historyCounterPlusEnd","historyCounter"],"mappings":"AAAA,SAASA,QAAT,QAAyB,QAAzB;AAEA,OAAO,MAAMC,eAAe,GAAIC,OAAD,IAAa;AAC1C,QAAMC,IAAI,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAb;AACA,QAAMC,WAAW,GAAGF,OAAO,CAACG,MAAR,GAAiB,CAArC;;AACA,MAAIF,IAAI,CAACG,QAAL,CAAcJ,OAAO,CAACE,WAAD,CAArB,CAAJ,EAAyC;AACvC,WAAOF,OAAO,CAACK,KAAR,CAAc,CAAd,EAAiBH,WAAjB,CAAP;AACD;;AACD,SAAOF,OAAP;AACD,CAPM;AASP,OAAO,MAAMM,uBAAuB,GAAIN,OAAD,IAAa;AAClD,QAAMC,IAAI,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAb;;AACA,MAAIA,IAAI,CAACG,QAAL,CAAcJ,OAAO,CAAC,CAAD,CAArB,CAAJ,EAA+B;AAC7B,WAAO,SAAP;AACD;;AACD,SAAOF,QAAQ,CAACE,OAAD,CAAf;AACD,CANM;AAQP,OAAO,MAAMO,sBAAsB,GAAIP,OAAD,IAAa;AACjD,QAAMC,IAAI,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAb;AACA,QAAMC,WAAW,GAAGF,OAAO,CAACG,MAAR,GAAiB,CAArC;;AACA,MAAIF,IAAI,CAACG,QAAL,CAAcJ,OAAO,CAACE,WAAD,CAArB,CAAJ,EAAyC;AACvC,WAAOF,OAAO,CAACK,KAAR,CAAc,CAAd,EAAiBH,WAAjB,CAAP;AACD;;AACD,SAAOF,OAAP;AACD,CAPM;AASP,OAAO,MAAMQ,UAAU,GAAIR,OAAD,IAAa;AACrC,QAAMS,WAAW,GAAGT,OAAO,CAACU,QAAR,EAApB;AACA,QAAMR,WAAW,GAAGO,WAAW,CAACN,MAAhC;AACA,QAAMQ,SAAS,GAAG,CAACF,WAAW,CAACJ,KAAZ,CAAkB,CAAlB,EAAqBH,WAArB,CAAD,EAAoC,GAApC,CAAlB;AACA,MAAIO,WAAW,CAACP,WAAW,GAAG,CAAf,CAAX,IAAgC,CAApC,EAAuC,OAAO,CAAC,GAAGO,WAAW,CAACJ,KAAZ,CAAkB,CAAlB,EAAqBH,WAArB,CAAJ,EAAuCU,IAAvC,CAA4C,EAA5C,CAAP;AACvC,SAAOD,SAAS,CAACC,IAAV,CAAe,EAAf,CAAP;AACD,CANM;AAQP,OAAO,MAAMC,cAAc,GAAIC,GAAD,IAAS;AACrC,QAAMC,GAAG,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAGF,GAAG,CAACX,MAAjB,EAAyBa,CAAC,GAAG,CAA7B,EAAgCA,CAAC,IAAI,CAArC,EAAwC;AACtC,QAAIF,GAAG,CAACE,CAAD,CAAH,KAAW,GAAX,IAAkBF,GAAG,CAACE,CAAD,CAAH,KAAW,GAA7B,IACCF,GAAG,CAACE,CAAD,CAAH,KAAW,GADZ,IACmBF,GAAG,CAACE,CAAD,CAAH,KAAW,GADlC,EACuC;AACrCD,MAAAA,GAAG,CAACE,IAAJ,CAASD,CAAT;AACD;AACF;;AACD,SAAOD,GAAG,CAAC,CAAD,CAAV;AACD,CATM;AAWP,OAAO,MAAMG,eAAe,GAAIC,QAAD,IAAc;AAC3C,QAAMC,SAAS,GAAGP,cAAc,CAACM,QAAD,CAAhC;;AACA,QAAME,iBAAiB,GAAGF,QAAQ,CAACd,KAAT,CAAe,CAAf,EAAkBe,SAAS,GAAG,CAA9B,CAA1B;;AACA,QAAME,eAAe,GAAGH,QAAQ,CAACd,KAAT,CAAee,SAAS,GAAG,CAA3B,EAA8BD,QAAQ,CAAChB,MAAvC,CAAxB;;AACA,MAAIiB,SAAJ,EAAe;AACb,QAAID,QAAQ,CAACC,SAAS,GAAG,CAAb,CAAR,KAA4B,GAAhC,EAAqC;AACnC,YAAMG,cAAc,GAAGF,iBAAiB,CAAChB,KAAlB,CAAwB,CAAxB,EAA2Be,SAAS,GAAG,CAAvC,CAAvB;AACA,YAAMI,YAAY,GAAGF,eAAe,CAACjB,KAAhB,CAAsB,CAAtB,EAAyBiB,eAAe,CAACnB,MAAhB,GAAyB,CAAlD,CAArB;AACA,aAAQ,GAAEoB,cAAe,GAAEC,YAAa,EAAxC;AACD;;AACD,WAAQ,GAAEH,iBAAkB,KAAIC,eAAgB,GAAhD;AACD;;AACD,SAAOH,QAAP;AACD,CAbM;AAeP,OAAO,MAAMM,UAAU,GAAIN,QAAD,IAAc;AACtC,QAAMlB,IAAI,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAb;AACA,QAAMyB,aAAa,GAAGP,QAAQ,CAAChB,MAA/B;;AACA,MAAIgB,QAAQ,CAACO,aAAa,GAAG,CAAjB,CAAR,KAAgC,GAApC,EAAyC;AACvC,UAAMC,qBAAqB,GAAGR,QAAQ,CAACd,KAAT,CAAe,CAAf,EAAkBqB,aAAa,GAAG,CAAlC,CAA9B;;AACA,WAAQ,GAAEC,qBAAsB,GAAhC;AACD;;AACD,MAAIR,QAAQ,CAACO,aAAa,GAAG,CAAjB,CAAR,KAAgC,GAApC,EAAyC;AACvC,UAAME,cAAc,GAAGT,QAAQ,CAACd,KAAT,CAAe,CAAf,EAAkBqB,aAAa,GAAG,CAAlC,CAAvB;;AACA,WAAQ,GAAEE,cAAe,GAAzB;AACD;;AAAC,MAAI,CAACT,QAAQ,CAACO,aAAa,GAAG,CAAjB,CAAR,CAA4BtB,QAA5B,CAAqCH,IAArC,CAAL,EAAiD;AACjD,WAAOiB,eAAe,CAACC,QAAD,CAAtB;AACD;;AACD,SAAOA,QAAP;AACD,CAdM","sourcesContent":["import { evaluate } from 'mathjs'\r\n\r\nexport const replacementSign = (counter) => {\r\n  const sign = ['+', '-', '*', '/', '.', '%']\r\n  const lengthArray = counter.length - 1\r\n  if (sign.includes(counter[lengthArray])) {\r\n    return counter.slice(0, lengthArray)\r\n  }\r\n  return counter\r\n}\r\n\r\nexport const forbiddenFirstCharacter = (counter) => {\r\n  const sign = ['*', '/', '.', '%']\r\n  if (sign.includes(counter[0])) {\r\n    return 'Ошибка!'\r\n  }\r\n  return evaluate(counter)\r\n}\r\n\r\nexport const forbiddenLastCharacter = (counter) => {\r\n  const sign = ['+', '-', '*', '/', '.', '%']\r\n  const lengthArray = counter.length - 1\r\n  if (sign.includes(counter[lengthArray])) {\r\n    return counter.slice(0, lengthArray)\r\n  }\r\n  return counter\r\n}\r\n\r\nexport const paintPoint = (counter) => {\r\n  const returnValue = counter.toString()\r\n  const lengthArray = returnValue.length\r\n  const returnEnd = [returnValue.slice(0, lengthArray), '0']\r\n  if (returnValue[lengthArray - 1] >= 0) return [...returnValue.slice(0, lengthArray)].join('')\r\n  return returnEnd.join('')\r\n}\r\n\r\nexport const foundSignIndex = (str) => {\r\n  const arr = []\r\n  for (let i = str.length; i > 0; i -= 1) {\r\n    if (str[i] === '+' || str[i] === '-'\r\n      || str[i] === '*' || str[i] === '/') {\r\n      arr.push(i)\r\n    }\r\n  }\r\n  return arr[0]\r\n}\r\n\r\nexport const inspectionSigns = (_counter) => {\r\n  const indexSign = foundSignIndex(_counter)\r\n  const sliceHistoryStart = _counter.slice(0, indexSign + 1)\r\n  const sliceHistoryEnd = _counter.slice(indexSign + 1, _counter.length)\r\n  if (indexSign) {\r\n    if (_counter[indexSign - 1] === '(') {\r\n      const sliceStartPlus = sliceHistoryStart.slice(0, indexSign - 1)\r\n      const sliceEndPlus = sliceHistoryEnd.slice(0, sliceHistoryEnd.length - 1)\r\n      return `${sliceStartPlus}${sliceEndPlus}`\r\n    }\r\n    return `${sliceHistoryStart}(-${sliceHistoryEnd})`\r\n  }\r\n  return _counter\r\n}\r\n\r\nexport const changeSign = (_counter) => {\r\n  const sign = ['+', '-', '/', '*']\r\n  const lengthCounter = _counter.length\r\n  if (_counter[lengthCounter - 1] === '-') {\r\n    const historyCounterPlusEnd = _counter.slice(0, lengthCounter - 1)\r\n    return `${historyCounterPlusEnd}+`\r\n  }\r\n  if (_counter[lengthCounter - 1] === '+') {\r\n    const historyCounter = _counter.slice(0, lengthCounter - 1)\r\n    return `${historyCounter}-`\r\n  } if (!_counter[lengthCounter - 1].includes(sign)) {\r\n    return inspectionSigns(_counter)\r\n  }\r\n  return _counter\r\n}\r\n"]},"metadata":{},"sourceType":"module"}