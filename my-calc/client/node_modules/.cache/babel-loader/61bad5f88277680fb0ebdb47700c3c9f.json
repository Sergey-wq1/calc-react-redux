{"ast":null,"code":"import { acNumOperation, delplyNumOperation, evlaNumOperation, minusplyNumOperation, multiplyNumOperation, plusminNumOperation, plusNumOperation, pointNumOperation, procentNumOperation } from '../actions/actions';\nimport Fetch from '../scripts/dataFetch';\nimport GetRequest from '../scripts/GetRequest';\nimport OperationSign from '../scripts/PutAway';\nimport retObjType from '../scripts/valuesNumOperation';\nconst initialState = {\n  addHistory: [],\n  history: [],\n  counter: ''\n};\n\nconst numReducer = (state = initialState, action) => {\n  const operationSign = new OperationSign();\n\n  switch (action.type) {\n    case returnObjectPropertyTypeValue(action.type)().type:\n      return { ...state,\n        addHistory: [],\n        counter: `${state.counter}${retObjType(action.type)().value}`\n      };\n\n    case plusNumOperation:\n      return { ...state,\n        addHistory: [],\n        counter: `${operationSign.putAway(state.counter)}+`\n      };\n\n    case acNumOperation:\n      return { ...state,\n        addHistory: [],\n        counter: ''\n      };\n\n    case multiplyNumOperation:\n      return { ...state,\n        addHistory: [],\n        counter: `${operationSign.putAway(state.counter)}*`\n      };\n\n    case minusplyNumOperation:\n      return { ...state,\n        addHistory: [],\n        counter: `${operationSign.putAway(state.counter)}-`\n      };\n\n    case delplyNumOperation:\n      return { ...state,\n        addHistory: [],\n        counter: `${operationSign.putAway(state.counter)}/`\n      };\n\n    case pointNumOperation:\n      return { ...state,\n        addHistory: [],\n        counter: `${operationSign.putAway(state.counter)}.`\n      };\n\n    case procentNumOperation:\n      return { ...state,\n        addHistory: [],\n        counter: `${operationSign.putAway(state.counter)}%`\n      };\n\n    case plusminNumOperation:\n      if (state.counter[state.counter.length - 1] === '+') {\n        return { ...state,\n          addHistory: [],\n          counter: `${state.counter.slice(0, state.counter.length - 1)}-`\n        };\n      }\n\n      if (state.counter[state.counter.length - 1] === '-') {\n        return { ...state,\n          addHistory: [],\n          counter: `${state.counter.slice(0, state.counter.length - 1)}+`\n        };\n      }\n\n      break;\n\n    case evlaNumOperation:\n      Fetch('/', 'POST', state.counter, operationSign.putFirst(operationSign.endValue(state.counter)));\n      GetRequest.getHistory().then(data => ({\n        addHistory: state.addHistory.push(...data)\n      }));\n      return {\n        history: state.addHistory,\n        counter: operationSign.putFirst(operationSign.endValue(state.counter))\n      };\n\n    default:\n      return state;\n  }\n\n  return 0;\n};\n\nexport default numReducer;","map":{"version":3,"sources":["D:/github/my-calc/client/src/redux/numReducer.js"],"names":["acNumOperation","delplyNumOperation","evlaNumOperation","minusplyNumOperation","multiplyNumOperation","plusminNumOperation","plusNumOperation","pointNumOperation","procentNumOperation","Fetch","GetRequest","OperationSign","retObjType","initialState","addHistory","history","counter","numReducer","state","action","operationSign","type","returnObjectPropertyTypeValue","value","putAway","length","slice","putFirst","endValue","getHistory","then","data","push"],"mappings":"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","sourcesContent":["import {\n  acNumOperation,\n  delplyNumOperation,\n  evlaNumOperation,\n  minusplyNumOperation,\n  multiplyNumOperation,\n  plusminNumOperation,\n  plusNumOperation,\n  pointNumOperation,\n  procentNumOperation,\n} from '../actions/actions'\nimport Fetch from '../scripts/dataFetch'\nimport GetRequest from '../scripts/GetRequest'\nimport OperationSign from '../scripts/PutAway'\nimport retObjType from '../scripts/valuesNumOperation'\n\nconst initialState = {\n  addHistory: [],\n  history: [],\n  counter: '',\n}\n\nconst numReducer = (state = initialState, action) => {\n  const operationSign = new OperationSign()\n  switch (action.type) {\n    case returnObjectPropertyTypeValue(action.type)().type:\n      return {\n        ...state,\n        addHistory: [],\n        counter: `${state.counter}${retObjType(action.type)().value}`,\n      }\n    case plusNumOperation:\n      return {\n        ...state,\n        addHistory: [],\n        counter: `${operationSign.putAway(state.counter)}+`,\n      }\n    case acNumOperation:\n      return {\n        ...state,\n        addHistory: [],\n        counter: '',\n      }\n    case multiplyNumOperation:\n      return {\n        ...state,\n        addHistory: [],\n        counter: `${operationSign.putAway(state.counter)}*`,\n      }\n    case minusplyNumOperation:\n      return {\n        ...state,\n        addHistory: [],\n        counter: `${operationSign.putAway(state.counter)}-`,\n      }\n    case delplyNumOperation:\n      return {\n        ...state,\n        addHistory: [],\n        counter: `${operationSign.putAway(state.counter)}/`,\n      }\n    case pointNumOperation:\n      return {\n        ...state,\n        addHistory: [],\n        counter: `${operationSign.putAway(state.counter)}.`,\n      }\n    case procentNumOperation:\n      return {\n        ...state,\n        addHistory: [],\n        counter: `${operationSign.putAway(state.counter)}%`,\n      }\n    case plusminNumOperation:\n      if (state.counter[state.counter.length - 1] === '+') {\n        return {\n          ...state,\n          addHistory: [],\n          counter: `${state.counter.slice(0, state.counter.length - 1)}-`,\n        }\n      } if (state.counter[state.counter.length - 1] === '-') {\n        return {\n          ...state,\n          addHistory: [],\n          counter: `${state.counter.slice(0, state.counter.length - 1)}+`,\n        }\n      }\n      break\n    case evlaNumOperation:\n      Fetch('/', 'POST', state.counter, operationSign.putFirst(operationSign.endValue(state.counter)))\n      GetRequest.getHistory().then((data) => (\n        { addHistory: state.addHistory.push(...data) }\n      ))\n      return {\n        history: state.addHistory,\n        counter: operationSign.putFirst(operationSign.endValue(state.counter)),\n      }\n    default:\n      return state\n  }\n  return 0\n}\n\nexport default numReducer\n"]},"metadata":{},"sourceType":"module"}