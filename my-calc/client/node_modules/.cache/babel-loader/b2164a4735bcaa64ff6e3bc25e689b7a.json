{"ast":null,"code":"import { acNumOperation, delplyNumOperation, evlaNumOperation, minusplyNumOperation, multiplyNumOperation, plusminNumOperation, plusNumOperation, pointNumOperation, procentNumOperation } from \"../actions/actions\";\nimport Fetch from \"../scripts/dataFetch\";\nimport { GetRequest } from \"../scripts/GetRequest\";\nimport { OperationSign } from \"../scripts/PutAway\";\nimport { retObjType } from \"../scripts/valuesNumOperation\";\nconst initialState = {\n  history: [],\n  counter: ''\n};\nexport const numReducer = (state = initialState, action) => {\n  let operationSign = new OperationSign();\n\n  switch (action.type) {\n    case retObjType(action.type)().type:\n      return { ...state,\n        counter: state.counter + `${retObjType(action.type)().value}`\n      };\n\n    case plusNumOperation:\n      let plus = operationSign.putAway(state.counter);\n      return { ...state,\n        counter: plus + '+'\n      };\n\n    case acNumOperation:\n      return { ...state,\n        counter: ''\n      };\n\n    case multiplyNumOperation:\n      let multi = operationSign.putAway(state.counter);\n      return { ...state,\n        counter: multi + '*'\n      };\n\n    case minusplyNumOperation:\n      let minus = operationSign.putAway(state.counter);\n      return { ...state,\n        counter: minus + '-'\n      };\n\n    case delplyNumOperation:\n      let del = operationSign.putAway(state.counter);\n      return { ...state,\n        counter: del + '/'\n      };\n\n    case pointNumOperation:\n      let point = operationSign.putAway(state.counter);\n      return { ...state,\n        counter: point + '.'\n      };\n\n    case procentNumOperation:\n      let proc = operationSign.putAway(state.counter);\n      return { ...state,\n        counter: proc + '%'\n      };\n\n    case plusminNumOperation:\n      let key = state.counter;\n\n      if (key[key.length - 1] === '+') {\n        return { ...state,\n          counter: state.counter.slice(0, key.length - 1) + '-'\n        };\n      } else if (key[key.length - 1] === '-') {\n        return { ...state,\n          counter: state.counter.slice(0, key.length - 1) + '+'\n        };\n      }\n\n      break;\n\n    case evlaNumOperation:\n      let tryCatch = operationSign.endValue(state.counter);\n      let result = operationSign.putFirst(tryCatch);\n      let saveHistory = state.counter;\n      Fetch('/', 'POST', saveHistory, result);\n      let request = GetRequest.getHistory().then(data => {\n        data.map(value => {\n          return {\n            expression: value.expression,\n            result: value.result\n          };\n        });\n        request;\n      });\n      return {\n        history: 'kl',\n        counter: result\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["D:/github/my-calc/client/src/redux/numReducer.js"],"names":["acNumOperation","delplyNumOperation","evlaNumOperation","minusplyNumOperation","multiplyNumOperation","plusminNumOperation","plusNumOperation","pointNumOperation","procentNumOperation","Fetch","GetRequest","OperationSign","retObjType","initialState","history","counter","numReducer","state","action","operationSign","type","value","plus","putAway","multi","minus","del","point","proc","key","length","slice","tryCatch","endValue","result","putFirst","saveHistory","request","getHistory","then","data","map","expression"],"mappings":"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","sourcesContent":["import {acNumOperation,delplyNumOperation,evlaNumOperation,minusplyNumOperation,multiplyNumOperation,plusminNumOperation,plusNumOperation,pointNumOperation,procentNumOperation} from \"../actions/actions\"\r\nimport Fetch from \"../scripts/dataFetch\"\r\nimport { GetRequest } from \"../scripts/GetRequest\"\r\nimport {OperationSign} from \"../scripts/PutAway\"\r\nimport {retObjType} from \"../scripts/valuesNumOperation\"\r\n\r\nconst initialState = {\r\n    history: [],\r\n    counter: ''\r\n}\r\n\r\nexport const numReducer = (state = initialState, action) => {\r\n    let operationSign = new OperationSign()\r\n    switch (action.type) {\r\n        case retObjType(action.type)().type:\r\n            return {\r\n                ...state,\r\n                counter: state.counter + `${retObjType(action.type)().value}`\r\n            }\r\n        case plusNumOperation:\r\n            let plus = operationSign.putAway(state.counter)\r\n            return {\r\n                ...state,\r\n                counter: plus + '+'\r\n            }\r\n        case acNumOperation:\r\n            return {\r\n                ...state,\r\n                counter: ''\r\n            }\r\n        case multiplyNumOperation:\r\n            let multi = operationSign.putAway(state.counter)\r\n            return {\r\n                ...state,\r\n                counter: multi + '*'\r\n            }\r\n        case minusplyNumOperation:\r\n            let minus = operationSign.putAway(state.counter)\r\n            return {\r\n                ...state,\r\n                counter: minus + '-'\r\n            }\r\n        case delplyNumOperation:\r\n            let del = operationSign.putAway(state.counter)\r\n            return {\r\n                ...state,\r\n                counter: del + '/'\r\n            }\r\n        case pointNumOperation:\r\n            let point = operationSign.putAway(state.counter)\r\n            return {\r\n                ...state,\r\n                counter: point + '.'\r\n            }\r\n        case procentNumOperation:\r\n            let proc = operationSign.putAway(state.counter)\r\n            return {\r\n                ...state,\r\n                counter: proc + '%'\r\n            }\r\n        case plusminNumOperation:\r\n            let key = state.counter\r\n            if (key[key.length - 1] === '+') {\r\n                return {\r\n                    ...state,\r\n                    counter: state.counter.slice(0, key.length - 1) + '-'\r\n                }\r\n            } else if (key[key.length - 1] === '-') {\r\n                return {\r\n                    ...state,\r\n                    counter: state.counter.slice(0, key.length - 1) + '+'\r\n                }\r\n            }\r\n            break\r\n        case evlaNumOperation:\r\n            let tryCatch = operationSign.endValue(state.counter)\r\n            let result = operationSign.putFirst(tryCatch)\r\n            let saveHistory = state.counter\r\n            Fetch('/', 'POST', saveHistory, result)\r\n            let request = GetRequest.getHistory().then(data => {\r\n                data.map(value => {\r\n                    return{\r\n                        expression: value.expression,\r\n                        result: value.result\r\n                    }\r\n                })\r\n                request\r\n            })\r\n            return {\r\n                history: 'kl',\r\n                counter: result\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}