{"ast":null,"code":"import { acNumOperation, delplyNumOperation, eightNumOperation, evlaNumOperation, fiveNumOperation, fourNumOperation, minusplyNumOperation, multiplyNumOperation, nineNumOperation, oneNumOperation, plusNumOperation, sevenNumOperation, sixNumOperation, threeNumOperation, twoNumOperation, zeroNumOperation } from \"../actions/actions\";\nconst NumberArray = [{\n  type: oneNumOperation,\n  value: 1\n}, {\n  type: twoNumOperation,\n  value: 2\n}, {\n  type: threeNumOperation,\n  value: 3\n}, {\n  type: fourNumOperation,\n  value: 4\n}, {\n  type: fiveNumOperation,\n  value: 5\n}, {\n  type: sixNumOperation,\n  value: 6\n}, {\n  type: sevenNumOperation,\n  value: 7\n}, {\n  type: eightNumOperation,\n  value: 8\n}, {\n  type: nineNumOperation,\n  value: 9\n}, {\n  type: zeroNumOperation,\n  value: 0\n}];\nexport const retObjType = actionType => {\n  return function () {\n    const num = NumberArray.filter(na => na.type === actionType);\n    const numAr = num.map(vc => {\n      return vc.type;\n    });\n    const numVal = num.map(vc => {\n      return vc.value;\n    });\n    return {\n      type: numAr[0],\n      value: numVal[0]\n    };\n  };\n};","map":{"version":3,"sources":["D:/github/my-calc/client/src/scripts/valuesNumOperation.js"],"names":["acNumOperation","delplyNumOperation","eightNumOperation","evlaNumOperation","fiveNumOperation","fourNumOperation","minusplyNumOperation","multiplyNumOperation","nineNumOperation","oneNumOperation","plusNumOperation","sevenNumOperation","sixNumOperation","threeNumOperation","twoNumOperation","zeroNumOperation","NumberArray","type","value","retObjType","actionType","num","filter","na","numAr","map","vc","numVal"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,kBAAzB,EAA6CC,iBAA7C,EAAgEC,gBAAhE,EAAkFC,gBAAlF,EAAoGC,gBAApG,EAAsHC,oBAAtH,EAA4IC,oBAA5I,EAAkKC,gBAAlK,EAAoLC,eAApL,EAAqMC,gBAArM,EAAuNC,iBAAvN,EAA0OC,eAA1O,EAA2PC,iBAA3P,EAA8QC,eAA9Q,EAA+RC,gBAA/R,QAAuT,oBAAvT;AAEC,MAAMC,WAAW,GAAG,CACjB;AAACC,EAAAA,IAAI,EAAER,eAAP;AAAwBS,EAAAA,KAAK,EAAE;AAA/B,CADiB,EAEjB;AAACD,EAAAA,IAAI,EAAEH,eAAP;AAAwBI,EAAAA,KAAK,EAAE;AAA/B,CAFiB,EAGjB;AAACD,EAAAA,IAAI,EAAEJ,iBAAP;AAA0BK,EAAAA,KAAK,EAAE;AAAjC,CAHiB,EAIjB;AAACD,EAAAA,IAAI,EAAEZ,gBAAP;AAAyBa,EAAAA,KAAK,EAAE;AAAhC,CAJiB,EAKjB;AAACD,EAAAA,IAAI,EAAEb,gBAAP;AAAyBc,EAAAA,KAAK,EAAE;AAAhC,CALiB,EAMjB;AAACD,EAAAA,IAAI,EAAEL,eAAP;AAAwBM,EAAAA,KAAK,EAAE;AAA/B,CANiB,EAOjB;AAACD,EAAAA,IAAI,EAAEN,iBAAP;AAA0BO,EAAAA,KAAK,EAAE;AAAjC,CAPiB,EAQjB;AAACD,EAAAA,IAAI,EAAEf,iBAAP;AAA0BgB,EAAAA,KAAK,EAAE;AAAjC,CARiB,EASjB;AAACD,EAAAA,IAAI,EAAET,gBAAP;AAAyBU,EAAAA,KAAK,EAAE;AAAhC,CATiB,EAUjB;AAACD,EAAAA,IAAI,EAAEF,gBAAP;AAAyBG,EAAAA,KAAK,EAAE;AAAhC,CAViB,CAApB;AAYD,OAAO,MAAMC,UAAU,GAAIC,UAAD,IAAgB;AACxC,SAAO,YAAU;AACf,UAAMC,GAAG,GAAGL,WAAW,CAACM,MAAZ,CAAmBC,EAAE,IAAIA,EAAE,CAACN,IAAH,KAAYG,UAArC,CAAZ;AACA,UAAMI,KAAK,GAAGH,GAAG,CAACI,GAAJ,CAAQC,EAAE,IAAG;AAAC,aAAOA,EAAE,CAACT,IAAV;AAAe,KAA7B,CAAd;AACA,UAAMU,MAAM,GAAGN,GAAG,CAACI,GAAJ,CAAQC,EAAE,IAAG;AAAC,aAAOA,EAAE,CAACR,KAAV;AAAgB,KAA9B,CAAf;AACA,WAAO;AAACD,MAAAA,IAAI,EAACO,KAAK,CAAC,CAAD,CAAX;AAAgBN,MAAAA,KAAK,EAAES,MAAM,CAAC,CAAD;AAA7B,KAAP;AACD,GALD;AAMD,CAPM","sourcesContent":["import { acNumOperation, delplyNumOperation, eightNumOperation, evlaNumOperation, fiveNumOperation, fourNumOperation, minusplyNumOperation, multiplyNumOperation, nineNumOperation, oneNumOperation, plusNumOperation, sevenNumOperation, sixNumOperation, threeNumOperation, twoNumOperation, zeroNumOperation } from \"../actions/actions\"\r\n\r\n const NumberArray = [\r\n    {type: oneNumOperation, value: 1},\r\n    {type: twoNumOperation, value: 2},\r\n    {type: threeNumOperation, value: 3},\r\n    {type: fourNumOperation, value: 4},\r\n    {type: fiveNumOperation, value: 5},\r\n    {type: sixNumOperation, value: 6},\r\n    {type: sevenNumOperation, value: 7},\r\n    {type: eightNumOperation, value: 8},\r\n    {type: nineNumOperation, value: 9},\r\n    {type: zeroNumOperation, value: 0}]\r\n\r\nexport const retObjType = (actionType) => {\r\n  return function(){\r\n    const num = NumberArray.filter(na => na.type === actionType)\r\n    const numAr = num.map(vc =>{return vc.type})\r\n    const numVal = num.map(vc =>{return vc.value})\r\n    return {type:numAr[0], value: numVal[0]} \r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}