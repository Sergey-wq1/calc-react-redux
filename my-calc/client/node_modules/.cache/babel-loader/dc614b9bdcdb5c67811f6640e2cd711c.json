{"ast":null,"code":"import { lastIndexOf } from 'lodash';\nimport { evaluate } from 'mathjs';\nimport Fetch from '../scripts/dataFetch';\nimport deleteRequest from '../scripts/deleteHistory';\nimport OperationSign from '../scripts/PutAway';\nimport updateHistory from '../scripts/updateHistory';\nimport { AC, DELETEHISTORY, DEPLY, EVAL, MINUS, MULTIPLY, NUM, PERSENT, PLUS, PLUSMIN, POINT, SHOWRENEWHISTORY } from './actions/variables';\nimport operations from '../constans/operations';\nconst initialState = {\n  disabledPoint: false,\n  updateNedeed: 0,\n  addHistory: [],\n  history: [],\n  counter: '0'\n};\n\nconst foundSignIndex = str => {\n  for (let i = str.length; i > 0; i--) {\n    if (str.includes(operations)) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nconst inspectionSigns = state => {\n  const indexSign = foundSignIndex(state.counter);\n  const sliceHistoryStart = state.counter.slice(0, indexSign + 1);\n  const sliceHistoryEnd = state.counter.slice(indexSign + 1, state.counter.length);\n\n  if (indexSign) {\n    if (state.counter[indexSign - 1] === '(') {\n      const sliceStartPlus = sliceHistoryStart.slice(0, indexSign - 1);\n      const sliceEndPlus = sliceHistoryEnd.slice(0, sliceHistoryEnd.length - 1);\n      return { ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${sliceStartPlus}${sliceEndPlus}`\n      };\n    }\n\n    return { ...state,\n      addHistory: [],\n      disabledPoint: false,\n      counter: `${sliceHistoryStart}(-${sliceHistoryEnd})`\n    };\n  }\n\n  return { ...state\n  };\n};\n\nconst changeSign = state => {\n  const sign = ['+', '-', '/', '*'];\n  const lengthCounter = state.counter.length;\n\n  if (state.counter[lengthCounter - 1] === '-') {\n    const historyCounterPlusEnd = state.counter.slice(0, lengthCounter - 1);\n    return { ...state,\n      addHistory: [],\n      disabledPoint: false,\n      counter: `${historyCounterPlusEnd}+`\n    };\n  }\n\n  if (state.counter[lengthCounter - 1] === '+') {\n    const historyCounter = state.counter.slice(0, lengthCounter - 1);\n    return { ...state,\n      addHistory: [],\n      disabledPoint: false,\n      counter: `${historyCounter}-`\n    };\n  }\n\n  if (!state.counter[lengthCounter - 1].includes(sign)) {\n    return inspectionSigns(state);\n  }\n\n  return { ...state\n  };\n};\n\nconst numReducer = (state = initialState, action) => {\n  const operationSign = new OperationSign();\n\n  switch (action.type) {\n    case NUM:\n      {\n        if (state.counter === '0' && state.counter.length === 1) {\n          return { ...state,\n            addHistory: [],\n            counter: `${state.counter.slice(1, 2)}${action.number}`\n          };\n        }\n\n        return { ...state,\n          addHistory: [],\n          counter: `${state.counter}${action.number}`\n        };\n      }\n\n    case PLUS:\n      return { ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${operationSign.putAway(state.counter)}+`\n      };\n\n    case AC:\n      return { ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: '0'\n      };\n\n    case MULTIPLY:\n      return { ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${operationSign.putAway(state.counter)}*`\n      };\n\n    case MINUS:\n      return { ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${operationSign.putAway(state.counter)}-`\n      };\n\n    case DEPLY:\n      return { ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${operationSign.putAway(state.counter)}/`\n      };\n\n    case POINT:\n      return { ...state,\n        disabledPoint: true,\n        addHistory: [],\n        counter: `${operationSign.pointEnd(state.counter)}.`\n      };\n\n    case PERSENT:\n      {\n        const indexSign = foundSignIndex(state.counter.slice(0, state.counter.length - 1));\n        const startHistory = state.counter.slice(0, indexSign);\n        const percent = state.counter.slice(indexSign + 1, state.counter.length);\n        const resultBeforePercent = evaluate(startHistory.slice(0, startHistory.length - 1));\n        const result = evaluate(resultBeforePercent / 100 * percent);\n        console.log(indexSign, state.counter.slice(0, state.counter.length - 1));\n        return { ...state,\n          addHistory: [],\n          counter: result\n        };\n      }\n\n    case PLUSMIN:\n      return changeSign(state);\n\n    case EVAL:\n      Fetch('/', 'POST', state.counter, operationSign.putFirst(operationSign.endValue(state.counter))); // eslint-disable-next-line no-case-declarations\n\n      const result = operationSign.putFirst(operationSign.endValue(state.counter));\n      return { ...state,\n        updateNedeed: state.updateNedeed + 1,\n        disabledPoint: false,\n        counter: result\n      };\n\n    case DELETEHISTORY:\n      deleteRequest(action.expression, action.result);\n      return { ...state,\n        updateNedeed: state.updateNedeed + 1,\n        history: updateHistory(state.history)\n      };\n\n    case SHOWRENEWHISTORY:\n      return { ...state,\n        history: action.data\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default numReducer;","map":{"version":3,"sources":["D:/github/calc/calc-react-redux/my-calc/client/src/redux/numReducer.js"],"names":["lastIndexOf","evaluate","Fetch","deleteRequest","OperationSign","updateHistory","AC","DELETEHISTORY","DEPLY","EVAL","MINUS","MULTIPLY","NUM","PERSENT","PLUS","PLUSMIN","POINT","SHOWRENEWHISTORY","operations","initialState","disabledPoint","updateNedeed","addHistory","history","counter","foundSignIndex","str","i","length","includes","inspectionSigns","state","indexSign","sliceHistoryStart","slice","sliceHistoryEnd","sliceStartPlus","sliceEndPlus","changeSign","sign","lengthCounter","historyCounterPlusEnd","historyCounter","numReducer","action","operationSign","type","number","putAway","pointEnd","startHistory","percent","resultBeforePercent","result","console","log","putFirst","endValue","expression","data"],"mappings":"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","sourcesContent":["import { lastIndexOf } from 'lodash'\nimport { evaluate } from 'mathjs'\nimport Fetch from '../scripts/dataFetch'\nimport deleteRequest from '../scripts/deleteHistory'\nimport OperationSign from '../scripts/PutAway'\nimport updateHistory from '../scripts/updateHistory'\nimport {\n  AC,\n  DELETEHISTORY,\n  DEPLY,\n  EVAL,\n  MINUS,\n  MULTIPLY,\n  NUM,\n  PERSENT,\n  PLUS,\n  PLUSMIN,\n  POINT,\n  SHOWRENEWHISTORY,\n} from './actions/variables'\nimport operations from '../constans/operations'\n\nconst initialState = {\n  disabledPoint: false,\n  updateNedeed: 0,\n  addHistory: [],\n  history: [],\n  counter: '0',\n}\n\nconst foundSignIndex = (str) => {\n  for(let i = str.length; i > 0; i--) {\n    if (str.includes(operations)) {\n      return i\n    }\n  }\n  return -1\n}\n\nconst inspectionSigns = (state) => {\n  const indexSign = foundSignIndex(state.counter)\n  const sliceHistoryStart = state.counter.slice(0, indexSign + 1)\n  const sliceHistoryEnd = state.counter.slice(indexSign + 1, state.counter.length)\n  if (indexSign) {\n    if (state.counter[indexSign - 1] === '(') {\n      const sliceStartPlus = sliceHistoryStart.slice(0, indexSign - 1)\n      const sliceEndPlus = sliceHistoryEnd.slice(0, sliceHistoryEnd.length - 1)\n      return {\n        ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${sliceStartPlus}${sliceEndPlus}`,\n      }\n    }\n    return {\n      ...state,\n      addHistory: [],\n      disabledPoint: false,\n      counter: `${sliceHistoryStart}(-${sliceHistoryEnd})`,\n    }\n  }\n  return {\n    ...state,\n  }\n}\n\nconst changeSign = (state) => {\n  const sign = ['+', '-', '/', '*']\n  const lengthCounter = state.counter.length\n  if (state.counter[lengthCounter - 1] === '-') {\n    const historyCounterPlusEnd = state.counter.slice(0, lengthCounter - 1)\n    return {\n      ...state,\n      addHistory: [],\n      disabledPoint: false,\n      counter: `${historyCounterPlusEnd}+`,\n    }\n  } if (state.counter[lengthCounter - 1] === '+') {\n    const historyCounter = state.counter.slice(0, lengthCounter - 1)\n    return {\n      ...state,\n      addHistory: [],\n      disabledPoint: false,\n      counter: `${historyCounter}-`,\n    }\n  } if (!state.counter[lengthCounter - 1].includes(sign)) {\n    return inspectionSigns(state)\n  }\n  return {\n    ...state,\n  }\n}\n\nconst numReducer = (state = initialState, action) => {\n  const operationSign = new OperationSign()\n  switch (action.type) {\n    case NUM: {\n      if (state.counter === '0' && state.counter.length === 1) {\n        return {\n          ...state,\n          addHistory: [],\n          counter: `${state.counter.slice(1, 2)}${action.number}`,\n        }\n      }\n      return {\n        ...state,\n        addHistory: [],\n        counter: `${state.counter}${action.number}`,\n      }\n    }\n    case PLUS:\n      return {\n        ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${operationSign.putAway(state.counter)}+`,\n      }\n    case AC:\n      return {\n        ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: '0',\n      }\n    case MULTIPLY:\n      return {\n        ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${operationSign.putAway(state.counter)}*`,\n      }\n    case MINUS:\n      return {\n        ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${operationSign.putAway(state.counter)}-`,\n      }\n    case DEPLY:\n      return {\n        ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${operationSign.putAway(state.counter)}/`,\n      }\n    case POINT:\n      return {\n        ...state,\n        disabledPoint: true,\n        addHistory: [],\n        counter: `${operationSign.pointEnd(state.counter)}.`,\n      }\n    case PERSENT: {\n      const indexSign = foundSignIndex(state.counter.slice(0, state.counter.length - 1))\n      const startHistory = state.counter.slice(0, indexSign)\n      const percent = state.counter.slice(indexSign + 1, state.counter.length)\n      const resultBeforePercent = evaluate(startHistory.slice(0, startHistory.length - 1))\n      const result = evaluate((resultBeforePercent / 100) * percent)\n      console.log(indexSign, state.counter.slice(0, state.counter.length - 1))\n      return {\n        ...state,\n        addHistory: [],\n        counter: result,\n      }\n    }\n    case PLUSMIN:\n      return changeSign(state)\n    case EVAL:\n      Fetch('/', 'POST', state.counter, operationSign.putFirst(operationSign.endValue(state.counter)))\n      // eslint-disable-next-line no-case-declarations\n      const result = operationSign.putFirst(operationSign.endValue(state.counter))\n      return {\n        ...state,\n        updateNedeed: state.updateNedeed + 1,\n        disabledPoint: false,\n        counter: result,\n      }\n    case DELETEHISTORY:\n      deleteRequest(action.expression, action.result)\n      return {\n        ...state,\n        updateNedeed: state.updateNedeed + 1,\n        history: updateHistory(state.history),\n      }\n    case SHOWRENEWHISTORY:\n      return {\n        ...state,\n        history: action.data,\n      }\n    default:\n      return state\n  }\n}\n\nexport default numReducer\n"]},"metadata":{},"sourceType":"module"}