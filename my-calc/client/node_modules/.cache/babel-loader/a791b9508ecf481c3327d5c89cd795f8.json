{"ast":null,"code":"import { action, makeAutoObservable } from 'mobx';\nimport { evaluate } from 'mathjs';\nimport { changeSign, forbiddenFirstCharacter, forbiddenLastCharacter, foundSignIndex, replacementSign } from '../helpers/changesOperationsMath';\nimport saveData from '../api/apiSaveHistory';\nimport historyStore from './historyStore';\n\nclass NumericStore {\n  constructor() {\n    this.counter = '0';\n\n    this.numericOperation = number => {\n      if (this.counter === '0' && this.counter.length === 1) {\n        this.counter = `${this.counter.slice(1, 2)}${number}`;\n      } else this.counter = `${this.counter}${number}`;\n    };\n\n    this.plusOperation = () => {\n      this.counter = `${replacementSign(this.counter)}+`;\n    };\n\n    this.minusOperation = () => {\n      this.counter = `${replacementSign(this.counter)}-`;\n    };\n\n    this.deleteAllOperation = () => {\n      this.counter = '0';\n    };\n\n    this.multiplyOperation = () => {\n      this.counter = `${replacementSign(this.counter)}*`;\n    };\n\n    this.devideOperation = () => {\n      this.counter = `${replacementSign(this.counter)}/`;\n    };\n\n    this.pointOperation = () => {\n      this.counter = `${replacementSign(this.counter)}.`;\n    };\n\n    this.percentOperation = () => {\n      const indexSign = foundSignIndex(this.counter.slice(0, this.counter.length - 1));\n      const startHistory = this.counter.slice(0, indexSign);\n      const percent = this.counter.slice(indexSign + 1, this.counter.length);\n      const resultBeforePercent = evaluate(startHistory.slice(0, startHistory.length - 1));\n      const resultCounter = evaluate(resultBeforePercent / 100 * percent);\n      this.counter = resultCounter;\n    };\n\n    this.evalOperation = () => {\n      const result = forbiddenFirstCharacter(forbiddenLastCharacter(this.counter));\n      saveData(this.counter, result.toString()).then(action(() => {\n        historyStore.showNewHistory();\n      }));\n      this.counter = result;\n    };\n\n    this.changeSign = () => {\n      this.counter = changeSign(this.counter);\n    };\n\n    makeAutoObservable(this);\n  }\n\n}\n\nexport default new NumericStore();","map":{"version":3,"sources":["D:/github/calc/calc-react-redux/my-calc/client/src/store/numericStore.js"],"names":["action","makeAutoObservable","evaluate","changeSign","forbiddenFirstCharacter","forbiddenLastCharacter","foundSignIndex","replacementSign","saveData","historyStore","NumericStore","constructor","counter","numericOperation","number","length","slice","plusOperation","minusOperation","deleteAllOperation","multiplyOperation","devideOperation","pointOperation","percentOperation","indexSign","startHistory","percent","resultBeforePercent","resultCounter","evalOperation","result","toString","then","showNewHistory"],"mappings":"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","sourcesContent":["import { action, makeAutoObservable } from 'mobx'\r\nimport { evaluate } from 'mathjs'\r\nimport {\r\n  changeSign,\r\n  forbiddenFirstCharacter,\r\n  forbiddenLastCharacter,\r\n  foundSignIndex,\r\n  replacementSign,\r\n} from '../helpers/changesOperationsMath'\r\nimport saveData from '../api/apiSaveHistory'\r\nimport historyStore from './historyStore'\r\n\r\nclass NumericStore {\r\n  counter = '0'\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  numericOperation = (number) => {\r\n    if (this.counter === '0' && this.counter.length === 1) {\r\n      this.counter = `${this.counter.slice(1, 2)}${number}`\r\n    } else this.counter = `${this.counter}${number}`\r\n  }\r\n\r\n  plusOperation = () => {\r\n    this.counter = `${replacementSign(this.counter)}+`\r\n  }\r\n\r\n  minusOperation = () => {\r\n    this.counter = `${replacementSign(this.counter)}-`\r\n  }\r\n\r\n  deleteAllOperation = () => {\r\n    this.counter = '0'\r\n  }\r\n\r\n  multiplyOperation = () => {\r\n    this.counter = `${replacementSign(this.counter)}*`\r\n  }\r\n\r\n  devideOperation = () => {\r\n    this.counter = `${replacementSign(this.counter)}/`\r\n  }\r\n\r\n  pointOperation = () => {\r\n    this.counter = `${replacementSign(this.counter)}.`\r\n  }\r\n\r\n  percentOperation = () => {\r\n    const indexSign = foundSignIndex(this.counter.slice(0, this.counter.length - 1))\r\n    const startHistory = this.counter.slice(0, indexSign)\r\n    const percent = this.counter.slice(indexSign + 1, this.counter.length)\r\n    const resultBeforePercent = evaluate(startHistory.slice(0, startHistory.length - 1))\r\n    const resultCounter = evaluate((resultBeforePercent / 100) * percent)\r\n    this.counter = resultCounter\r\n  }\r\n\r\n  evalOperation = () => {\r\n    const result = forbiddenFirstCharacter((forbiddenLastCharacter(this.counter)))\r\n    saveData(this.counter, result.toString())\r\n      .then(action(() => {\r\n        historyStore.showNewHistory()\r\n      }))\r\n    this.counter = result\r\n  }\r\n\r\n  changeSign = () => {\r\n    this.counter = changeSign(this.counter)\r\n  }\r\n}\r\n\r\nexport default new NumericStore()"]},"metadata":{},"sourceType":"module"}