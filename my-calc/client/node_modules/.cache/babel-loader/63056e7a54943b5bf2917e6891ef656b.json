{"ast":null,"code":"import { evaluate } from 'mathjs'; // import saveData from '../api/apiSaveData'\n\nimport deleteRequest from '../api/apiDeletehistory';\nimport updateHistory from '../helpers/updateHistory';\nimport { AC, DELETEHISTORY, DEPLY, EVAL, MINUS, MULTIPLY, NUM, PERSENT, PLUS, PLUSMIN, POINT, SHOWRENEWHISTORY } from './actions/variables';\nimport getHistoryApi from '../api/resendDataApi';\nimport { forbiddenFirstCharacter, forbiddenLastCharacter, replacementSign } from '../helpers/changesOperationsMath';\nconst initialState = {\n  disabledPoint: false,\n  addHistory: [],\n  history: [],\n  counter: '0'\n};\n\nconst foundSignIndex = str => {\n  const arr = [];\n\n  for (let i = str.length; i > 0; i -= 1) {\n    if (str[i] === '+' || str[i] === '-' || str[i] === '*' || str[i] === '/') {\n      arr.push(i);\n    }\n  }\n\n  return arr[0];\n};\n\nconst inspectionSigns = state => {\n  const indexSign = foundSignIndex(state.counter);\n  const sliceHistoryStart = state.counter.slice(0, indexSign + 1);\n  const sliceHistoryEnd = state.counter.slice(indexSign + 1, state.counter.length);\n\n  if (indexSign) {\n    if (state.counter[indexSign - 1] === '(') {\n      const sliceStartPlus = sliceHistoryStart.slice(0, indexSign - 1);\n      const sliceEndPlus = sliceHistoryEnd.slice(0, sliceHistoryEnd.length - 1);\n      return { ...state,\n        counter: `${sliceStartPlus}${sliceEndPlus}`\n      };\n    }\n\n    return { ...state,\n      counter: `${sliceHistoryStart}(-${sliceHistoryEnd})`\n    };\n  }\n\n  return { ...state\n  };\n};\n\nconst changeSign = state => {\n  const sign = ['+', '-', '/', '*'];\n  const lengthCounter = state.counter.length;\n\n  if (state.counter[lengthCounter - 1] === '-') {\n    const historyCounterPlusEnd = state.counter.slice(0, lengthCounter - 1);\n    return { ...state,\n      counter: `${historyCounterPlusEnd}+`\n    };\n  }\n\n  if (state.counter[lengthCounter - 1] === '+') {\n    const historyCounter = state.counter.slice(0, lengthCounter - 1);\n    return { ...state,\n      counter: `${historyCounter}-`\n    };\n  }\n\n  if (!state.counter[lengthCounter - 1].includes(sign)) {\n    return inspectionSigns(state);\n  }\n\n  return { ...state\n  };\n};\n\nconst numReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case NUM:\n      {\n        if (state.counter === '0' && state.counter.length === 1) {\n          console.log(action.number);\n          return { ...state,\n            addHistory: [],\n            disabledPoint: !state.disabledPoint,\n            counter: `${state.counter.slice(1, 2)}${action.number}`\n          };\n        }\n\n        return { ...state,\n          addHistory: [],\n          counter: `${state.counter}${action.number}`\n        };\n      }\n\n    case PLUS:\n      return { ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${replacementSign(state.counter)}+`\n      };\n\n    case AC:\n      return { ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: '0'\n      };\n\n    case MULTIPLY:\n      return { ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${replacementSign(state.counter)}*`\n      };\n\n    case MINUS:\n      return { ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${replacementSign(state.counter)}-`\n      };\n\n    case DEPLY:\n      return { ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${replacementSign(state.counter)}/`\n      };\n\n    case POINT:\n      return { ...state,\n        disabledPoint: true,\n        addHistory: [],\n        counter: `${replacementSign(state.counter)}.`\n      };\n\n    case PERSENT:\n      {\n        const indexSign = foundSignIndex(state.counter.slice(0, state.counter.length - 1));\n        const startHistory = state.counter.slice(0, indexSign);\n        const percent = state.counter.slice(indexSign + 1, state.counter.length);\n        const resultBeforePercent = evaluate(startHistory.slice(0, startHistory.length - 1));\n        const result = evaluate(resultBeforePercent / 100 * percent);\n        return { ...state,\n          addHistory: [],\n          counter: result\n        };\n      }\n\n    case PLUSMIN:\n      return changeSign(state);\n\n    case EVAL:\n      {\n        // saveData(state.counter, forbiddenFirstCharacter(forbiddenLastCharacter(state.counter)))\n        const result = forbiddenFirstCharacter(forbiddenLastCharacter(state.counter));\n        return { ...state,\n          disabledPoint: false,\n          counter: result\n        };\n      }\n\n    case DELETEHISTORY:\n      deleteRequest(action.expression, action.result).then(() => ({ ...state,\n        updateNedeed: state.updateNedeed + 1,\n        history: updateHistory(state.history)\n      })).catch(() => ({ ...state\n      }));\n      return false;\n\n    case SHOWRENEWHISTORY:\n      getHistoryApi().then(response => {\n        const {\n          data\n        } = response;\n        console.log(data);\n        return { ...state,\n          addHistory: [5],\n          history: data\n        };\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default numReducer;","map":{"version":3,"sources":["D:/github/calc/calc-react-redux/my-calc/client/src/redux/numReducer.js"],"names":["evaluate","deleteRequest","updateHistory","AC","DELETEHISTORY","DEPLY","EVAL","MINUS","MULTIPLY","NUM","PERSENT","PLUS","PLUSMIN","POINT","SHOWRENEWHISTORY","getHistoryApi","forbiddenFirstCharacter","forbiddenLastCharacter","replacementSign","initialState","disabledPoint","addHistory","history","counter","foundSignIndex","str","arr","i","length","push","inspectionSigns","state","indexSign","sliceHistoryStart","slice","sliceHistoryEnd","sliceStartPlus","sliceEndPlus","changeSign","sign","lengthCounter","historyCounterPlusEnd","historyCounter","includes","numReducer","action","type","console","log","number","startHistory","percent","resultBeforePercent","result","expression","then","updateNedeed","catch","response","data"],"mappings":"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","sourcesContent":["import { evaluate } from 'mathjs'\n// import saveData from '../api/apiSaveData'\nimport deleteRequest from '../api/apiDeletehistory'\nimport updateHistory from '../helpers/updateHistory'\nimport {\n  AC,\n  DELETEHISTORY,\n  DEPLY,\n  EVAL,\n  MINUS,\n  MULTIPLY,\n  NUM,\n  PERSENT,\n  PLUS,\n  PLUSMIN,\n  POINT,\n  SHOWRENEWHISTORY,\n} from './actions/variables'\nimport getHistoryApi from '../api/resendDataApi'\nimport { forbiddenFirstCharacter, forbiddenLastCharacter, replacementSign } from '../helpers/changesOperationsMath'\n\nconst initialState = {\n  disabledPoint: false,\n  addHistory: [],\n  history: [],\n  counter: '0',\n}\n\nconst foundSignIndex = (str) => {\n  const arr = []\n  for (let i = str.length; i > 0; i -= 1) {\n    if (str[i] === '+' || str[i] === '-'\n      || str[i] === '*' || str[i] === '/') {\n      arr.push(i)\n    }\n  }\n  return arr[0]\n}\n\nconst inspectionSigns = (state) => {\n  const indexSign = foundSignIndex(state.counter)\n  const sliceHistoryStart = state.counter.slice(0, indexSign + 1)\n  const sliceHistoryEnd = state.counter.slice(indexSign + 1, state.counter.length)\n  if (indexSign) {\n    if (state.counter[indexSign - 1] === '(') {\n      const sliceStartPlus = sliceHistoryStart.slice(0, indexSign - 1)\n      const sliceEndPlus = sliceHistoryEnd.slice(0, sliceHistoryEnd.length - 1)\n      return {\n        ...state,\n        counter: `${sliceStartPlus}${sliceEndPlus}`,\n      }\n    }\n    return {\n      ...state,\n      counter: `${sliceHistoryStart}(-${sliceHistoryEnd})`,\n    }\n  }\n  return {\n    ...state,\n  }\n}\n\nconst changeSign = (state) => {\n  const sign = ['+', '-', '/', '*']\n  const lengthCounter = state.counter.length\n  if (state.counter[lengthCounter - 1] === '-') {\n    const historyCounterPlusEnd = state.counter.slice(0, lengthCounter - 1)\n    return {\n      ...state,\n      counter: `${historyCounterPlusEnd}+`,\n    }\n  } if (state.counter[lengthCounter - 1] === '+') {\n    const historyCounter = state.counter.slice(0, lengthCounter - 1)\n    return {\n      ...state,\n      counter: `${historyCounter}-`,\n    }\n  } if (!state.counter[lengthCounter - 1].includes(sign)) {\n    return inspectionSigns(state)\n  }\n  return {\n    ...state,\n  }\n}\n\nconst numReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case NUM: {\n      if (state.counter === '0' && state.counter.length === 1) {\n        console.log(action.number)\n        return {\n          ...state,\n          addHistory: [],\n          disabledPoint: !state.disabledPoint,\n          counter: `${state.counter.slice(1, 2)}${action.number}`,\n        }\n      }\n      return {\n        ...state,\n        addHistory: [],\n        counter: `${state.counter}${action.number}`,\n      }\n    }\n    case PLUS:\n      return {\n        ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${replacementSign(state.counter)}+`,\n      }\n    case AC:\n      return {\n        ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: '0',\n      }\n    case MULTIPLY:\n      return {\n        ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${replacementSign(state.counter)}*`,\n      }\n    case MINUS:\n      return {\n        ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${replacementSign(state.counter)}-`,\n      }\n    case DEPLY:\n      return {\n        ...state,\n        addHistory: [],\n        disabledPoint: false,\n        counter: `${replacementSign(state.counter)}/`,\n      }\n    case POINT:\n      return {\n        ...state,\n        disabledPoint: true,\n        addHistory: [],\n        counter: `${replacementSign(state.counter)}.`,\n      }\n    case PERSENT: {\n      const indexSign = foundSignIndex(state.counter.slice(0, state.counter.length - 1))\n      const startHistory = state.counter.slice(0, indexSign)\n      const percent = state.counter.slice(indexSign + 1, state.counter.length)\n      const resultBeforePercent = evaluate(startHistory.slice(0, startHistory.length - 1))\n      const result = evaluate((resultBeforePercent / 100) * percent)\n      return {\n        ...state,\n        addHistory: [],\n        counter: result,\n      }\n    }\n    case PLUSMIN:\n      return changeSign(state)\n    case EVAL: {\n      // saveData(state.counter, forbiddenFirstCharacter(forbiddenLastCharacter(state.counter)))\n      const result = forbiddenFirstCharacter((forbiddenLastCharacter(state.counter)))\n      return {\n        ...state,\n        disabledPoint: false,\n        counter: result,\n      }\n    }\n    case DELETEHISTORY:\n      deleteRequest(action.expression, action.result)\n        .then(() => ({\n          ...state,\n          updateNedeed: state.updateNedeed + 1,\n          history: updateHistory(state.history),\n        }))\n        .catch(() => ({\n          ...state,\n        }))\n      return false\n    case SHOWRENEWHISTORY:\n      getHistoryApi()\n        .then((response) => {\n          const { data } = response\n          console.log(data)\n          return {\n            ...state,\n            addHistory: [5],\n            history: data,\n          }\n        })\n    default:\n      return state\n  }\n}\n\nexport default numReducer\n"]},"metadata":{},"sourceType":"module"}