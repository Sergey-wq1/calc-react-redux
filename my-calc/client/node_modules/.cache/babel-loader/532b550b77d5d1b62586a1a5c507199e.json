{"ast":null,"code":"var _jsxFileName = \"D:\\\\github\\\\calc\\\\calc-react-redux\\\\my-calc\\\\client\\\\src\\\\components\\\\Calculator\\\\Buttons.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport { Grid } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport operation from '../../constans/dataRedux';\nimport { buttonOperations, buttons, buttonZero } from '../../constans/colorSchemeButtons';\nimport operations from '../../constans/operations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Buttons = props => {\n  _s2();\n\n  const [disabled, setDisabled] = useState(false);\n  const checkPoint = useCallback(value => {\n    if (operations.includes(value)) setDisabled(false);else if (value === ',') setDisabled(true);\n  }, []);\n  const handleClick = useCallback((event, recovery) => function () {\n    checkPoint(event);\n    if (typeof event === 'number') numericStore.numericOperation(event);else if (recovery) console.log(recovery());\n  }, []);\n  const stateArray = useCallback(() => {\n    var _s = $RefreshSig$();\n\n    return operation.map(_s((val, i) => {\n      _s();\n\n      const checkButton = useCallback(value => {\n        if (value === 0) return buttonZero;\n        if (typeof value === 'string') return buttonOperations;\n        return buttons;\n      }, []);\n      const buttonSettings = checkButton(val.type);\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: buttonSettings.size,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          sx: {\n            bgcolor: buttonSettings.color,\n            color: 'white',\n            borderRadius: 2,\n            borderColor: 'text.primary',\n            gridRow: '5',\n            width: '100%',\n            gridColumn: 'span 2'\n          },\n          disabled: val.type === ',' ? disabled : false,\n          variant: \"outlined\",\n          size: \"large\",\n          onClick: handleClick(val.type, val.function),\n          className: val.classStyle,\n          children: val.type\n        }, i.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }, this)\n      }, val.type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, this);\n    }, \"81RhvqBqhHkbc9xiHVK4ZStFZhQ=\"));\n  }, [disabled]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      rowSpacing: 1,\n      columnSpacing: {\n        xs: 1\n      },\n      children: stateArray()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s2(Buttons, \"fBmt8vaPrRLlBuywfTJA1R1VHH0=\");\n\n_c = Buttons;\nexport default Buttons;\n\nvar _c;\n\n$RefreshReg$(_c, \"Buttons\");","map":{"version":3,"sources":["D:/github/calc/calc-react-redux/my-calc/client/src/components/Calculator/Buttons.js"],"names":["React","useCallback","useState","Grid","Button","operation","buttonOperations","buttons","buttonZero","operations","Buttons","props","disabled","setDisabled","checkPoint","value","includes","handleClick","event","recovery","numericStore","numericOperation","console","log","stateArray","map","val","i","checkButton","buttonSettings","type","size","bgcolor","color","borderRadius","borderColor","gridRow","width","gridColumn","function","classStyle","toString","xs"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react'\r\nimport { Grid } from '@mui/material'\r\nimport Button from '@mui/material/Button'\r\nimport operation from '../../constans/dataRedux'\r\nimport { buttonOperations, buttons, buttonZero } from '../../constans/colorSchemeButtons'\r\nimport operations from '../../constans/operations'\r\n\r\nconst Buttons = (props) => {\r\n  const [disabled, setDisabled] = useState(false)\r\n\r\n  const checkPoint = useCallback((value) => {\r\n    if (operations.includes(value)) setDisabled(false)\r\n    else if (value === ',') setDisabled(true)\r\n  }, [])\r\n\r\n  const handleClick = useCallback((event, recovery) => function () {\r\n    checkPoint(event)\r\n    if (typeof event === 'number') numericStore.numericOperation(event)\r\n    else if (recovery) console.log(recovery())\r\n  }, [])\r\n\r\n  const stateArray = useCallback(() => operation.map((val, i) => {\r\n    const checkButton = useCallback((value) => {\r\n      if (value === 0) return buttonZero\r\n      if (typeof value === 'string') return buttonOperations\r\n      return buttons\r\n    }, [])\r\n\r\n    const buttonSettings = checkButton(val.type)\r\n    return (\r\n      <Grid key={val.type} item xs={buttonSettings.size}>\r\n        <Button\r\n          sx={{\r\n            bgcolor: buttonSettings.color,\r\n            color: 'white',\r\n            borderRadius: 2,\r\n            borderColor: 'text.primary',\r\n            gridRow: '5',\r\n            width: '100%',\r\n            gridColumn: 'span 2',\r\n          }}\r\n          disabled={val.type === ',' ? disabled : false}\r\n          variant=\"outlined\"\r\n          size=\"large\"\r\n          onClick={handleClick(val.type, val.function)}\r\n          key={i.toString()}\r\n          className={val.classStyle}\r\n        >\r\n          {val.type}\r\n        </Button>\r\n      </Grid>\r\n    )\r\n  }), [disabled])\r\n\r\n  return (\r\n    <>\r\n      <Grid container rowSpacing={1} columnSpacing={{ xs: 1 }}>\r\n        {stateArray()}\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Buttons"]},"metadata":{},"sourceType":"module"}