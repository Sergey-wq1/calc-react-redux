{"ast":null,"code":"/* eslint-disable no-plusplus */\n\n/* eslint-disable class-methods-use-this */\nimport { evaluate } from 'mathjs';\n\nclass OperationSign {\n  constructor() {\n    this.type = ['+', '-', '*', '/', '.', '%'];\n    this.typeNoALL = ['*', '/', '.', '%'];\n    this.typeWithoutPointPercent = ['+', '-', '*', '/'];\n  }\n\n  putAway(mas) {\n    const lengthArray = mas.length - 1;\n\n    if (this.type.includes(mas[lengthArray])) {\n      return mas.slice(0, lengthArray);\n    }\n\n    return mas;\n  }\n\n  putFirst(mas) {\n    if (this.typeNoALL.includes(mas[0])) {\n      return 'Ошибка!';\n    }\n\n    const result = evaluate(mas);\n    return result;\n  }\n\n  endValue(mas) {\n    const lengthArray = mas.length - 1;\n\n    if (this.type.includes(mas[lengthArray])) {\n      return mas.slice(0, lengthArray);\n    }\n\n    return mas;\n  }\n\n  pointEnd(mas) {\n    const lengthArray = mas.length;\n    const returnEnd = [mas.slice(0, lengthArray), '0'];\n    return returnEnd.join('');\n  }\n\n  plusMinOperation(mas) {\n    const NumValue = [];\n\n    for (let i = mas.length - 1; i >= 0; i--) {\n      if (this.typeWithoutPointPercent.includes(mas[i])) {\n        mas.sclice;\n      }\n    }\n\n    console.log(NumValue, mas);\n    return mas;\n  }\n\n}\n\nexport default OperationSign;","map":{"version":3,"sources":["C:/git/my-calc/client/src/scripts/PutAway.js"],"names":["evaluate","OperationSign","constructor","type","typeNoALL","typeWithoutPointPercent","putAway","mas","lengthArray","length","includes","slice","putFirst","result","endValue","pointEnd","returnEnd","join","plusMinOperation","NumValue","i","sclice","console","log"],"mappings":"AAAA;;AACA;AACA,SACEA,QADF,QAEO,QAFP;;AAIA,MAAMC,aAAN,CAAoB;AAClBC,EAAAA,WAAW,GAAG;AACZ,SAAKC,IAAL,GAAY,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAZ;AACA,SAAKC,SAAL,GAAiB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAjB;AACA,SAAKC,uBAAL,GAA+B,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAA/B;AACD;;AAEDC,EAAAA,OAAO,CAACC,GAAD,EAAM;AACX,UAAMC,WAAW,GAAGD,GAAG,CAACE,MAAJ,GAAa,CAAjC;;AACA,QAAI,KAAKN,IAAL,CAAUO,QAAV,CAAmBH,GAAG,CAACC,WAAD,CAAtB,CAAJ,EAA0C;AACxC,aAAOD,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAaH,WAAb,CAAP;AACD;;AACD,WAAOD,GAAP;AACD;;AAEDK,EAAAA,QAAQ,CAACL,GAAD,EAAM;AACZ,QAAI,KAAKH,SAAL,CAAeM,QAAf,CAAwBH,GAAG,CAAC,CAAD,CAA3B,CAAJ,EAAqC;AACnC,aAAO,SAAP;AACD;;AACD,UAAMM,MAAM,GAAGb,QAAQ,CAACO,GAAD,CAAvB;AACA,WAAOM,MAAP;AACD;;AAEDC,EAAAA,QAAQ,CAACP,GAAD,EAAM;AACZ,UAAMC,WAAW,GAAGD,GAAG,CAACE,MAAJ,GAAa,CAAjC;;AACA,QAAI,KAAKN,IAAL,CAAUO,QAAV,CAAmBH,GAAG,CAACC,WAAD,CAAtB,CAAJ,EAA0C;AACxC,aAAOD,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAaH,WAAb,CAAP;AACD;;AACD,WAAOD,GAAP;AACD;;AAEDQ,EAAAA,QAAQ,CAACR,GAAD,EAAM;AACZ,UAAMC,WAAW,GAAGD,GAAG,CAACE,MAAxB;AACA,UAAMO,SAAS,GAAG,CAACT,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAaH,WAAb,CAAD,EAA4B,GAA5B,CAAlB;AACA,WAAOQ,SAAS,CAACC,IAAV,CAAe,EAAf,CAAP;AACD;;AAEDC,EAAAA,gBAAgB,CAACX,GAAD,EAAM;AACpB,UAAMY,QAAQ,GAAG,EAAjB;;AACA,SAAK,IAAIC,CAAC,GAAGb,GAAG,CAACE,MAAJ,GAAa,CAA1B,EAA6BW,CAAC,IAAI,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACxC,UAAI,KAAKf,uBAAL,CAA6BK,QAA7B,CAAsCH,GAAG,CAACa,CAAD,CAAzC,CAAJ,EAAmD;AACjDb,QAAAA,GAAG,CAACc,MAAJ;AACD;AACF;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EAAsBZ,GAAtB;AACA,WAAOA,GAAP;AACD;;AA9CiB;;AAiDpB,eAAeN,aAAf","sourcesContent":["/* eslint-disable no-plusplus */\n/* eslint-disable class-methods-use-this */\nimport {\n  evaluate,\n} from 'mathjs'\n\nclass OperationSign {\n  constructor() {\n    this.type = ['+', '-', '*', '/', '.', '%']\n    this.typeNoALL = ['*', '/', '.', '%']\n    this.typeWithoutPointPercent = ['+', '-', '*', '/']\n  }\n\n  putAway(mas) {\n    const lengthArray = mas.length - 1\n    if (this.type.includes(mas[lengthArray])) {\n      return mas.slice(0, lengthArray)\n    }\n    return mas\n  }\n\n  putFirst(mas) {\n    if (this.typeNoALL.includes(mas[0])) {\n      return 'Ошибка!'\n    }\n    const result = evaluate(mas)\n    return result\n  }\n\n  endValue(mas) {\n    const lengthArray = mas.length - 1\n    if (this.type.includes(mas[lengthArray])) {\n      return mas.slice(0, lengthArray)\n    }\n    return mas\n  }\n\n  pointEnd(mas) {\n    const lengthArray = mas.length\n    const returnEnd = [mas.slice(0, lengthArray), '0']\n    return returnEnd.join('')\n  }\n\n  plusMinOperation(mas) {\n    const NumValue = []\n    for (let i = mas.length - 1; i >= 0; i--) {\n      if (this.typeWithoutPointPercent.includes(mas[i])) {\n        mas.sclice\n      }\n    }\n    console.log(NumValue, mas)\n    return mas\n  }\n}\n\nexport default OperationSign\n"]},"metadata":{},"sourceType":"module"}