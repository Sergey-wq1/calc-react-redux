{"ast":null,"code":"/* eslint-disable no-plusplus */\n\n/* eslint-disable class-methods-use-this */\nimport { evaluate } from 'mathjs';\n\nclass OperationSign {\n  constructor() {\n    this.type = ['+', '-', '*', '/', '.', '%'];\n    this.typeNoALL = ['*', '/', '.', '%'];\n    this.typeWithoutPointPercent = ['+', '-', '*', '/'];\n    this.onlyMultiplyAndDivision = ['*', '/'];\n  }\n\n  putAway(mas) {\n    const lengthArray = mas.length - 1;\n\n    if (this.type.includes(mas[lengthArray])) {\n      return mas.slice(0, lengthArray);\n    }\n\n    return mas;\n  }\n\n  putFirst(mas) {\n    if (this.typeNoALL.includes(mas[0])) {\n      return 'Ошибка!';\n    }\n\n    const result = evaluate(mas);\n    return result;\n  }\n\n  endValue(mas) {\n    const lengthArray = mas.length - 1;\n\n    if (this.type.includes(mas[lengthArray])) {\n      return mas.slice(0, lengthArray);\n    }\n\n    return mas;\n  }\n\n  pointEnd(array) {\n    const returndedValue = array.toString();\n    const lengthArray = returndedValue.length;\n    const returnEnd = [returndedValue.slice(0, lengthArray), '0'];\n    if (returndedValue[lengthArray - 1] >= 0) return [...returndedValue.slice(0, lengthArray)].join('');\n    return returnEnd.join('');\n  }\n\n}\n\nexport default OperationSign;","map":{"version":3,"sources":["D:/github/calc/calc-react-redux/my-calc/client/src/scripts/PutAway.js"],"names":["evaluate","OperationSign","constructor","type","typeNoALL","typeWithoutPointPercent","onlyMultiplyAndDivision","putAway","mas","lengthArray","length","includes","slice","putFirst","result","endValue","pointEnd","array","returndedValue","toString","returnEnd","join"],"mappings":"AAAA;;AACA;AACA,SACEA,QADF,QAEO,QAFP;;AAIA,MAAMC,aAAN,CAAoB;AAClBC,EAAAA,WAAW,GAAG;AACZ,SAAKC,IAAL,GAAY,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAZ;AACA,SAAKC,SAAL,GAAiB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAjB;AACA,SAAKC,uBAAL,GAA+B,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAA/B;AACA,SAAKC,uBAAL,GAA+B,CAAC,GAAD,EAAM,GAAN,CAA/B;AACD;;AAEDC,EAAAA,OAAO,CAACC,GAAD,EAAM;AACX,UAAMC,WAAW,GAAGD,GAAG,CAACE,MAAJ,GAAa,CAAjC;;AACA,QAAI,KAAKP,IAAL,CAAUQ,QAAV,CAAmBH,GAAG,CAACC,WAAD,CAAtB,CAAJ,EAA0C;AACxC,aAAOD,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAaH,WAAb,CAAP;AACD;;AACD,WAAOD,GAAP;AACD;;AAEDK,EAAAA,QAAQ,CAACL,GAAD,EAAM;AACZ,QAAI,KAAKJ,SAAL,CAAeO,QAAf,CAAwBH,GAAG,CAAC,CAAD,CAA3B,CAAJ,EAAqC;AACnC,aAAO,SAAP;AACD;;AACD,UAAMM,MAAM,GAAGd,QAAQ,CAACQ,GAAD,CAAvB;AACA,WAAOM,MAAP;AACD;;AAEDC,EAAAA,QAAQ,CAACP,GAAD,EAAM;AACZ,UAAMC,WAAW,GAAGD,GAAG,CAACE,MAAJ,GAAa,CAAjC;;AACA,QAAI,KAAKP,IAAL,CAAUQ,QAAV,CAAmBH,GAAG,CAACC,WAAD,CAAtB,CAAJ,EAA0C;AACxC,aAAOD,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAaH,WAAb,CAAP;AACD;;AACD,WAAOD,GAAP;AACD;;AAEDQ,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,UAAMC,cAAc,GAAGD,KAAK,CAACE,QAAN,EAAvB;AACA,UAAMV,WAAW,GAAGS,cAAc,CAACR,MAAnC;AACA,UAAMU,SAAS,GAAG,CAACF,cAAc,CAACN,KAAf,CAAqB,CAArB,EAAwBH,WAAxB,CAAD,EAAuC,GAAvC,CAAlB;AACA,QAAIS,cAAc,CAACT,WAAW,GAAG,CAAf,CAAd,IAAmC,CAAvC,EAA0C,OAAO,CAAC,GAAGS,cAAc,CAACN,KAAf,CAAqB,CAArB,EAAwBH,WAAxB,CAAJ,EAA0CY,IAA1C,CAA+C,EAA/C,CAAP;AAC1C,WAAOD,SAAS,CAACC,IAAV,CAAe,EAAf,CAAP;AACD;;AAtCiB;;AAyCpB,eAAepB,aAAf","sourcesContent":["/* eslint-disable no-plusplus */\n/* eslint-disable class-methods-use-this */\nimport {\n  evaluate,\n} from 'mathjs'\n\nclass OperationSign {\n  constructor() {\n    this.type = ['+', '-', '*', '/', '.', '%']\n    this.typeNoALL = ['*', '/', '.', '%']\n    this.typeWithoutPointPercent = ['+', '-', '*', '/']\n    this.onlyMultiplyAndDivision = ['*', '/']\n  }\n\n  putAway(mas) {\n    const lengthArray = mas.length - 1\n    if (this.type.includes(mas[lengthArray])) {\n      return mas.slice(0, lengthArray)\n    }\n    return mas\n  }\n\n  putFirst(mas) {\n    if (this.typeNoALL.includes(mas[0])) {\n      return 'Ошибка!'\n    }\n    const result = evaluate(mas)\n    return result\n  }\n\n  endValue(mas) {\n    const lengthArray = mas.length - 1\n    if (this.type.includes(mas[lengthArray])) {\n      return mas.slice(0, lengthArray)\n    }\n    return mas\n  }\n\n  pointEnd(array) {\n    const returndedValue = array.toString()\n    const lengthArray = returndedValue.length\n    const returnEnd = [returndedValue.slice(0, lengthArray), '0']\n    if (returndedValue[lengthArray - 1] >= 0) return [...returndedValue.slice(0, lengthArray)].join('')\n    return returnEnd.join('')\n  }\n}\n\nexport default OperationSign\n"]},"metadata":{},"sourceType":"module"}